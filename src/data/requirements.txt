# Core Dependencies
fastapi>=0.100.0
uvicorn>=0.20.0
python-dotenv>=1.0.0
pydantic>=2.0.0

# LangChain & AI
langchain>=0.0.300
langchain-core>=0.1.0
langchain-community>=0.2.17
langchain-openai>=0.1.25
langchain-chroma>=0.0.1
langchain-milvus>=0.1.5
langchain-ollama>=0.1.3
openai>=1.52.0
tiktoken>=0.7.0

# Vector Database & Search
chromadb>=0.4.0
sqlalchemy>=2.0.0
rank-bm25>=0.2.2

# Data Processing
numpy>=1.24.0
pandas>=2.0.0
python-multipart>=0.0.6
beautifulsoup4>=4.12.3

# UI/Frontend
streamlit>=1.39.0

# Utils
requests>=2.31.0
tqdm>=4.65.0
PyYAML>=6.0.0

"""
def seed_milvus_live(URL: str, URI_link: str, collection_name: str, doc_name: str, use_ollama: bool = False) -> Milvus:
    """
    Hàm crawl dữ liệu trực tiếp từ URL và tạo vector embeddings trong Milvus
    Args:
        URL (str): URL của trang web cần crawl dữ liệu
        URI_link (str): Đường dẫn kết nối đến Milvus
        collection_name (str): Tên collection trong Milvus
        doc_name (str): Tên định danh cho tài liệu được crawl
        use_ollama (bool): Sử dụng Ollama embeddings thay vì OpenAI
    """
    if use_ollama:
        embeddings = OllamaEmbeddings(
            model="llama3.2"  # hoặc model khác mà bạn đã cài đặt
        )
    else:
        embeddings = OpenAIEmbeddings(model="text-embedding-3-large")
    
    documents = crawl_web(URL)

    # Cập nhật metadata cho mỗi document với giá trị mặc định
    for doc in documents:
        metadata = {
            'source': doc.metadata.get('source') or '',
            'content_type': doc.metadata.get('content_type') or 'text/plain',
            'title': doc.metadata.get('title') or '',
            'description': doc.metadata.get('description') or '',
            'language': doc.metadata.get('language') or 'en',
            'doc_name': doc_name,
            'start_index': doc.metadata.get('start_index') or 0
        }
        doc.metadata = metadata

    uuids = [str(uuid4()) for _ in range(len(documents))]

    vectorstore = Milvus(
        embedding_function=embeddings,
        connection_args={"uri": URI_link},
        collection_name=collection_name,
        drop_old=True
    )
    vectorstore.add_documents(documents=documents, ids=uuids)
    print('vector: ', vectorstore)
    return vectorstore

def handle_url_input(use_ollama_embeddings: bool):
    """
    Xử lý khi người dùng chọn crawl URL
    """
    collection_name = st.text_input(
        "Tên collection trong Milvus:", 
        "data_test_live",
        help="Nhập tên collection bạn muốn lưu trong Milvus"
    )
    url = st.text_input("Nhập URL:", "https://www.stack-ai.com/docs")
    
    if st.button("Crawl dữ liệu"):
        if not collection_name:
            st.error("Vui lòng nhập tên collection!")
            return
            
        with st.spinner("Đang crawl dữ liệu..."):
            try:
                seed_milvus_live(
                    url, 
                    'http://localhost:19530', 
                    collection_name, 
                    'stack-ai', 
                    use_ollama=use_ollama_embeddings
                )
                st.success(f"Đã crawl dữ liệu thành công vào collection '{collection_name}'!")
            except Exception as e:
                st.error(f"Lỗi khi crawl dữ liệu: {str(e)}")


"""