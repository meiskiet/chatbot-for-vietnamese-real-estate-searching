"""
File ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng Chatbot AI
Ch·ª©c nƒÉng: 
- T·∫°o giao di·ªán web v·ªõi Streamlit
- X·ª≠ l√Ω t∆∞∆°ng t√°c chat v·ªõi ng∆∞·ªùi d√πng
- K·∫øt n·ªëi v·ªõi AI model ƒë·ªÉ tr·∫£ l·ªùi
"""

# === IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ===
import streamlit as st  # Th∆∞ vi·ªán t·∫°o giao di·ªán web
from dotenv import load_dotenv  # ƒê·ªçc file .env ch·ª©a API key
from seed_data import seed_milvus # H√†m x·ª≠ l√Ω d·ªØ li·ªáu
from agent import get_retriever as get_openai_retriever, get_llm_and_agent as get_openai_agent
from local_ollama import get_retriever as get_ollama_retriever, get_llm_and_agent as get_ollama_agent
from langchain_community.callbacks.streamlit import StreamlitCallbackHandler
from langchain_community.chat_message_histories import StreamlitChatMessageHistory

# === THI·∫æT L·∫¨P GIAO DI·ªÜN TRANG WEB ===
def setup_page():
    """
    C·∫•u h√¨nh trang web c∆° b·∫£n
    """
    st.set_page_config(
        page_title="AI Assistant",  # Ti√™u ƒë·ªÅ tab tr√¨nh duy·ªát
        page_icon="üí¨",  # Icon tab
        layout="wide"  # Giao di·ªán r·ªông
    )

import re, html
def linkify(text):
    return re.sub(r'(https?://\S+)', r'[\1](\1)', html.escape(text))


# === KH·ªûI T·∫†O ·ª®NG D·ª§NG ===
def initialize_app():
    """
    Kh·ªüi t·∫°o c√°c c√†i ƒë·∫∑t c·∫ßn thi·∫øt:
    - ƒê·ªçc file .env ch·ª©a API key
    - C·∫•u h√¨nh trang web
    """
    load_dotenv()  # ƒê·ªçc API key t·ª´ file .env
    setup_page()  # Thi·∫øt l·∫≠p giao di·ªán

# === THANH C√îNG C·ª§ B√äN TR√ÅI ===
def setup_sidebar():
    """
    T·∫°o thanh c√¥ng c·ª• b√™n tr√°i v·ªõi c√°c t√πy ch·ªçn
    """
    with st.sidebar:
        st.title("‚öôÔ∏è C·∫•u h√¨nh")
        
        # Ph·∫ßn 1: Ch·ªçn Embeddings Model
        st.header("üî§ Embeddings Model")
        embeddings_choice = st.radio(
            "Ch·ªçn Embeddings Model:",
            ["text-embedding-3-large", "llama3.2"]
        )
        use_ollama_embeddings = (embeddings_choice == "Ollama")
        
        # Ph·∫ßn 2: C·∫•u h√¨nh Data
        st.header("üìö Ngu·ªìn d·ªØ li·ªáu")
        data_source = st.radio(
            "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
            ["File Local", "URL tr·ª±c ti·∫øp"]
        )
        
        # X·ª≠ l√Ω ngu·ªìn d·ªØ li·ªáu d·ª±a tr√™n embeddings ƒë√£ ch·ªçn
        if data_source == "File Local":
            handle_local_file(use_ollama_embeddings)
            
        # Th√™m ph·∫ßn ch·ªçn collection ƒë·ªÉ query
        st.header("üîç Collection ƒë·ªÉ truy v·∫•n")
        collection_to_query = st.text_input(
            "Nh·∫≠p t√™n collection c·∫ßn truy v·∫•n:",
            "data_test",
            help="Nh·∫≠p t√™n collection b·∫°n mu·ªën s·ª≠ d·ª•ng ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin"
        )
        
        # Ph·∫ßn 3: Ch·ªçn Model ƒë·ªÉ tr·∫£ l·ªùi
        st.header("ü§ñ Model AI")
        model_choice = st.radio(
            "Ch·ªçn AI Model ƒë·ªÉ tr·∫£ l·ªùi:",
            ["Mistral", "Llama3.2"]
        )
        
        return model_choice, collection_to_query

def handle_local_file(use_ollama_embeddings: bool):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn t·∫£i file
    """
    collection_name = st.text_input(
        "T√™n collection trong Milvus:", 
        "data_test",
        help="Nh·∫≠p t√™n collection b·∫°n mu·ªën l∆∞u trong Milvus"
    )
    filename = st.text_input("T√™n file JSON:", "stack.json")
    directory = st.text_input("Th∆∞ m·ª•c ch·ª©a file:", "data")
    
    if st.button("T·∫£i d·ªØ li·ªáu t·ª´ file"):
        if not collection_name:
            st.error("Vui l√≤ng nh·∫≠p t√™n collection!")
            return
            
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
            try:
                seed_milvus(
                    'http://localhost:19530', 
                    collection_name, 
                    filename, 
                    directory, 
                    use_ollama=use_ollama_embeddings
                )
                st.success(f"ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng v√†o collection '{collection_name}'!")
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")



# === GIAO DI·ªÜN CHAT CH√çNH ===
def setup_chat_interface(model_choice):
    st.title("üè† HomeGenie ‚Äì Tr·ª£ l√Ω b·∫•t ƒë·ªông s·∫£n")
    
    st.caption("Tr∆°j l√Ω AI ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi LangChain v√† ...")
    
    msgs = StreamlitChatMessageHistory(key="lc_msgs")
    
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
        ]
        msgs.add_ai_message("T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")

    for msg in st.session_state.messages:
        role = "assistant" if msg["role"] == "assistant" else "human"
        st.chat_message(role).write(msg["content"])

    return msgs

# === X·ª¨ L√ù TIN NH·∫ÆN NG∆Ø·ªúI D√ôNG ===
def handle_user_input(msgs, agent_executor):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn:
    1. Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    2. G·ªçi AI x·ª≠ l√Ω v√† tr·∫£ l·ªùi
    3. L∆∞u v√†o l·ªãch s·ª≠ chat
    """
    if prompt := st.chat_input("H√£y cho t√¥i bi·∫øt nhu c·∫ßu t√¨m ki·∫øm c·ªßa b·∫°n!"):
        # L∆∞u v√† hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        st.session_state.messages.append({"role": "human", "content": prompt})
        st.chat_message("human").write(prompt)
        msgs.add_user_message(prompt)

        # X·ª≠ l√Ω v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        with st.chat_message("assistant"):
            st_callback = StreamlitCallbackHandler(st.container())
            
            # L·∫•y l·ªãch s·ª≠ chat
            chat_history = [
                {"role": msg["role"], "content": msg["content"]}
                for msg in st.session_state.messages[:-1]
            ]

            # G·ªçi AI x·ª≠ l√Ω
            response = agent_executor.invoke(
                {
                    "input": prompt,
                    "chat_history": chat_history
                },
                {"callbacks": [st_callback]}
            )

            # L∆∞u v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
            output = response["output"]
            st.session_state.messages.append({"role": "assistant", "content": output})
            msgs.add_ai_message(output)
            st.write(output)
            st.markdown(linkify(output))
# === H√ÄM CH√çNH ===
def main():
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng ch∆∞∆°ng tr√¨nh
    """
    initialize_app()
    model_choice, collection_to_query = setup_sidebar()
    msgs = setup_chat_interface(model_choice)
    
    # Kh·ªüi t·∫°o AI d·ª±a tr√™n l·ª±a ch·ªçn model ƒë·ªÉ tr·∫£ l·ªùi
    if model_choice == "Qwen":
        retriever = get_openai_retriever(collection_to_query)
        agent_executor = get_openai_agent(retriever, "gpt4")
    else:
        retriever = get_ollama_retriever(collection_to_query)
        agent_executor = get_ollama_agent(retriever)
    
    handle_user_input(msgs, agent_executor)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main() 